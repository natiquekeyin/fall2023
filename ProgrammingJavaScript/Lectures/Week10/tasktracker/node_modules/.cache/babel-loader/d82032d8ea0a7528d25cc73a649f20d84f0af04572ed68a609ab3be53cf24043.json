{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\noman\\\\OneDrive - Keyin College\\\\Fall2023\\\\ProgrammingJavaScript\\\\Lectures\\\\Week10\\\\tasktracker\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport logo from \"./logo.svg\";\nimport Header from \"./components/Header\";\nimport Tasks from \"./components/Tasks\";\nimport Temp1 from \"./components/Temp1\";\nimport { useState, useEffect } from \"react\";\nimport AddTask from \"./components/AddTask\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  useEffect(() => {\n    const getTasks = async () => {\n      const tasksFromServer = await fetchTasks();\n      setTasks(tasksFromServer);\n    };\n    const fetchTasks = async () => {\n      const res = await fetch(\"http://localhost:5000/tasks\");\n      const data = await res.json();\n      // console.log(data);\n      return data;\n    };\n    fetchTasks();\n  }, []);\n  const [showAddTask, setShowAddTask] = useState(false);\n  const [tasks, setTasks] = useState([]);\n  // to make state variable global and transerferable to ANY component we put them in App.js...\n  // tasks is now a state variable with initial value set to an array []... and we can use setTasks to change the state of tasks -VA\n\n  const deleteTask = id => {\n    // console.log(\"delete\", id);\n    // filter funciton will filter all the tasks...leaving out the task with the id.. given in paramter...\n    setTasks(tasks.filter(task => task.id != id));\n  };\n  const toggleReminder = id => {\n    // console.log(\"hello\", id);\n    setTasks(tasks.map(task => task.id === id ? {\n      ...task,\n      reminder: !task.reminder\n    } : task));\n  };\n  const addTask = task => {\n    // console.log(task);\n\n    const id = Math.floor(Math.random() * 10000) + 1;\n    const newTask = {\n      id,\n      ...task\n    };\n    setTasks([...tasks, newTask]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      onAdd: () => setShowAddTask(!showAddTask),\n      showAdd: showAddTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), tasks.length > 0 ? /*#__PURE__*/_jsxDEV(Tasks, {\n      tasks: tasks,\n      onDelete: deleteTask,\n      onToggle: toggleReminder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this) : \"No tasks to show\", showAddTask && /*#__PURE__*/_jsxDEV(AddTask, {\n      onAdd: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"x08JOSQsP4nWx2AVZdm98TuUxaM=\");\n_c = App;\nexport default App;\n\n// Deploy this applicaiton!\n// setting up a server.. by using \"serve\"\n// JSON Server..\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","Header","Tasks","Temp1","useState","useEffect","AddTask","jsxDEV","_jsxDEV","App","_s","getTasks","tasksFromServer","fetchTasks","setTasks","res","fetch","data","json","showAddTask","setShowAddTask","tasks","deleteTask","id","filter","task","toggleReminder","map","reminder","addTask","Math","floor","random","newTask","className","children","onAdd","showAdd","fileName","_jsxFileName","lineNumber","columnNumber","length","onDelete","onToggle","_c","$RefreshReg$"],"sources":["C:/Users/noman/OneDrive - Keyin College/Fall2023/ProgrammingJavaScript/Lectures/Week10/tasktracker/src/App.js"],"sourcesContent":["import logo from \"./logo.svg\";\nimport Header from \"./components/Header\";\nimport Tasks from \"./components/Tasks\";\nimport Temp1 from \"./components/Temp1\";\nimport { useState, useEffect } from \"react\";\nimport AddTask from \"./components/AddTask\";\nimport \"./App.css\";\n\nfunction App() {\n  useEffect(() => {\n    const getTasks = async () => {\n      const tasksFromServer = await fetchTasks();\n      setTasks(tasksFromServer);\n    };\n\n    const fetchTasks = async () => {\n      const res = await fetch(\"http://localhost:5000/tasks\");\n      const data = await res.json();\n      // console.log(data);\n      return data;\n    };\n\n    fetchTasks();\n  }, []);\n  const [showAddTask, setShowAddTask] = useState(false);\n  const [tasks, setTasks] = useState([]);\n  // to make state variable global and transerferable to ANY component we put them in App.js...\n  // tasks is now a state variable with initial value set to an array []... and we can use setTasks to change the state of tasks -VA\n\n  const deleteTask = (id) => {\n    // console.log(\"delete\", id);\n    // filter funciton will filter all the tasks...leaving out the task with the id.. given in paramter...\n    setTasks(tasks.filter((task) => task.id != id));\n  };\n\n  const toggleReminder = (id) => {\n    // console.log(\"hello\", id);\n    setTasks(\n      tasks.map((task) =>\n        task.id === id ? { ...task, reminder: !task.reminder } : task\n      )\n    );\n  };\n\n  const addTask = (task) => {\n    // console.log(task);\n\n    const id = Math.floor(Math.random() * 10000) + 1;\n    const newTask = { id, ...task };\n    setTasks([...tasks, newTask]);\n  };\n\n  return (\n    <div className=\"container\">\n      <Header\n        onAdd={() => setShowAddTask(!showAddTask)}\n        showAdd={showAddTask}\n      />\n      {tasks.length > 0 ? (\n        <Tasks tasks={tasks} onDelete={deleteTask} onToggle={toggleReminder} />\n      ) : (\n        \"No tasks to show\"\n      )}\n\n      {showAddTask && <AddTask onAdd={addTask} />}\n\n      {/* <Temp1 /> */}\n    </div>\n  );\n}\n\nexport default App;\n\n// Deploy this applicaiton!\n// setting up a server.. by using \"serve\"\n// JSON Server..\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}