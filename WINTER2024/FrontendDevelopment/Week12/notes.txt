API: Application Programming Interface!
    contract provided by one piece of software to another!
    structured request and response!

REST APIS:
    Representational State Transfer
    Architecrure style for designing networked applications
    Relies on a stateless, client-server protcol, ALMOST ALWAYS HTTP...
    Treats server objects as resources that can be created or destroyed...
    All APIS have their own rules and structure....

    HTTP Requests:
        GET: Retrieve data from a specified resource..
        POST: Submit data to be processed to a spceified resource
        PUT: Update a specified resource
        DELETE: Delete a specified resource


    API Endpoints:
        GET     https://someurl.com/api/users .... //Get all users
        GET     https://someurl.com/api/users/1... //Get one user only with id 1
        POST    https://someurl.com/api/users.......//Add a user
        PUT     https://someurl.com/api/users/1...//Update user
        DELETE  https://someurl.com/api/users/1.... Delete user....

XMLHttpRequest - ALREADY DISCUSSED...

Fetch API:
    1.Promises: 
        almost like real world promises!
        1. fulfil , 2. not fulfil
        1. resolve, 2. reject


A fetch() promise only rejects when the request fails, for example, because of a badly-formed request URL or a network error. A fetch() promise does not reject if the server responds with HTTP status codes that indicate errors (404, 504, etc.). Instead, a then() handler must check the Response.ok and/or Response.status properties.


Async/Await:

A new function type that is called "async" functions!

The async functions return promise..

There is a keyword "await" that is used to wait for the resolution of the promise...

async function fetchData(){

}