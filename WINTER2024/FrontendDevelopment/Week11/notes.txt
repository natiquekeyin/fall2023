Week11:
 Prototypal Inheritance: A classical way of implementing objects in JS.(NOT INCLUDING CLASSES DIRECTLY)

 ES5, ES6 introduced the concept of Classes and objects...more close to the OOP..(object Oriented Programming)

Other then JavaScript! all OOP languages define constructor with the SAME name as class:

In othe languages:

class Book{

    Book(){

    }
}


// class Book {} // a class is a blue print in which we dfine our data and functions...

// let objBook = new Book(); //we create object to use the classes' properties....

class Book {
  // special function called "constructor function" that is used to initialize the values of class...

  constructor(a, b) {
    this.x = a;
    this.y = b;
  }

  someFunction() {
    this.x = 10;
    this.y = "Alan SMith";
  }
}

let objBook = new Book();

// objBook.someFunction();

console.log(objBook);

LocalStorage API:

static: static functions CAN be accessed without createing object of their class.
static functions and variables are actually "class" level elements NOT "object" level elemetns...
static functions/variables do not require object to be accessed...
Store.addBook();
Store.removeBook();


ASYNCHRONOUS PROGRAMMING:
  API for Async programming are:
   i)XMLHttpRequest & Fetch (OUR DISCUSSION)
   ii)JQuery Ajax,Axios,other HTTP libraries
   iii) Node.js fs(filesystem) module

  Ways to work with Async Code:
    i)Callbacks
    ii)Promises
    iii)Async/Await

  N.B:  Async requests in the background
        No page reload/refresh
        Ineteractive

XMLHttpRequest(XHR) Object:
 We are bringing data from our own folders..
 next we will go to a website(API)that will provide 1000s of uses and we can display them on our page../..

